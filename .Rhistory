?covid19ViewerShiny::covid
?covid19ViewerShiny::covid
library(tsibbledata)
?tsibbledata
?tsibbledata::data
?covid19ViewerShiny::covid
?covid19ViewerShiny::covid
devtools::load_all(".")
?covid19ViewerShiny::covid
?covid19ViewerShiny::covid
?covid19ViewerShiny::covid
?covid19ViewerShiny::covid
devtools::load_all(".")
devtools::load_all(".")
?covid19ViewerShiny::covid
?covid19ViewerShiny::covid
devtools::document()
?covid19ViewerShiny::covid
devtools::load_all(".")
?covid19ViewerShiny::covid
?covid19ViewerShiny::covid
?covid
??covid
library(covid19ViewerShiny)
?covid
?covid19ViewerShiny::covid
devtools::document()
devtools::document()
?covid19ViewerShiny::covid
library(nycflights13)
?nycflights13::airlines
?covid19ViewerShiny::covid
devtools::document()
?covid19ViewerShiny::covid
devtools::document()
?covid19ViewerShiny::covid
devtools::document()
?covid19ViewerShiny::covid
devtools::document()
?covid19ViewerShiny::covid
devtools::document()
?covid19ViewerShiny::runShinyPackageApp
runShinyPackageApp()
read_rds(here::here("data/WHO-COVID-19-global-data.csv")) %>%
janitor::clean_names()
read_rds(here::here("data/covid.rds")) %>%
janitor::clean_names()
read_rda(here::here("data/covid.rda")) %>%
janitor::clean_names()
runShinyPackageApp()
runShinyPackageApp()
runShinyPackageApp()
load("D:/Important Files/curriculum/ETC5523 Communicating with Data/r-package-assessment-ycui0008/data/covid.rda")
View(covid)
runShinyPackageApp()
devtools::load_all(".")
runShinyPackageApp()
devtools::load_all(".")
library(covid19ViewerShiny)
runShinyPackageApp()
runApp('D:/Important Files/curriculum/ETC5523 Communicating with Data/shiny-assessment-ycui0008/covid-19')
library(covid19ViewerShiny)
runShinyPackageApp()
devtools::document()
devtools::test()
devtools::load_all(".")
runShinyPackageApp()
runShinyPackageApp()
devtools::load_all(".")
runShinyPackageApp()
runShinyPackageApp()
devtools::load_all(".")
runShinyPackageApp()
devtools::load_all(".")
runShinyPackageApp()
here::here("inst/app")
runShinyPackageApp()
runShinyPackageApp()
devtools::load_all(".")
library(covid19ViewerShiny)
runShinyPackageApp()
load(file = "covid.rda")
covid
devtools::load_all(".")
runShinyPackageApp()
library(covid19ViewerShiny)
runShinyPackageApp()
library(covid19ViewerShiny)
runShinyPackageApp()
library(covid19ViewerShiny)
runShinyPackageApp()
testthat::auto_test_package()
runShinyPackageApp()
devtools::load_all(".")
devtools::document()
devtools::document()
library(covid19ViewerShiny)
runShinyPackageApp()
library(covid19ViewerShiny)
runShinyPackageApp()
?covid
max(covid$date_reported)
runShinyPackageApp()
runShinyPackageApp()
knitr::include_graphics("shiny.png")
devtools::document()
devtools:::test(fresh=TRUE)
testthat::test_dir()
devtools::document()
library(covid19ViewerShiny)
devtools::document()
library(covid19ViewerShiny)
usethis::use_vignette(name = "covid19ViewerShiny",
title = "covid19 Viewer Shiny App")
usethis::use_testthat()
devtools::load_all(".")
devtools:::test()
usethis::use_test(name = "UI")
devtools::test()
devtools::check()
R.version.string
here::here
here::here()
knitr::include_graphics("man/image/shiny.png")
usethis::use_r("ui")
devtools::load_all(".")
devtools::document()
multiSelection <- function(id, inputDisplay, selection){
# id must be char type
# inputDisplay must be char followed by a ":"
# selection must be vector
pickerInput(id, inputDisplay,
choices = unique(selection),
options = list(`actions-box` = TRUE, `none-selected-text` = "Please make a selection!"),
selected = unique(selection)[1:10],
multiple = TRUE)
}
shiny::runApp('inst/app')
??glimpse
dplyr::glimpse(covid$country)
runApp('inst/app')
devtools::load_all(".")
devtools::document()
rm(list = c("multiSelection"))
devtools::document()
devtools::load_all(".")
?multiSelection
devtools::document()
library(covid19ViewerShiny)
launchlaunch_app()
launch_app()
usethis::use_r(name = "serverFunction")
devtools::load_all(".")
devtools::document()
leaflet_circle <- function(data, weight = 1, varName, r = 0.2, fillOpacity = 0.009){
leaflet::leaflet(data) %>%
addTiles() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(lat = ~lat_mean, lng = ~long_mean, weight = weight, radius = ~(varName)^r,
fillOpacity = fillOpacity, group = "varName")
}
runApp('inst/app')
df2
df1 <- covid %>%
# left_join(pop_table, by = c("country" = "country")) %>%
left_join(map, by = c("country" = "region")) %>%
filter(date_reported == input$end_date3)
# df2 <- filter(df1, date_reported == input$end_date3)
df3 <- df1 %>%
group_by(country) %>%
summarise(long_mean = mean(long),
lat_mean = mean(lat))
df2 <- df1 %>%
left_join(df3, by = c("country" = "country"))
map <- map_data("world") %>%
mutate(region = recode(region,
"USA" = "United States of America",
"UK" = "The United Kingdom"))
df1 <- covid %>%
# left_join(pop_table, by = c("country" = "country")) %>%
left_join(map, by = c("country" = "region")) %>%
filter(date_reported == input$end_date3)
# df2 <- filter(df1, date_reported == input$end_date3)
df3 <- df1 %>%
group_by(country) %>%
summarise(long_mean = mean(long),
lat_mean = mean(lat))
df2 <- df1 %>%
left_join(df3, by = c("country" = "country"))
df1 <- covid %>%
# left_join(pop_table, by = c("country" = "country")) %>%
left_join(map, by = c("country" = "region")) %>%
filter(date_reported == input$end_date3)
population <- read_html("https://www.worldometers.info/world-population/population-by-country/")
poplation_country <- population %>%
html_nodes("tr :nth-child(2)") %>% html_text()
pop_number <- population %>%
html_nodes("td:nth-child(3)") %>% html_text()
pop_table <- tibble(country = poplation_country[-1], population = pop_number)
runApp('inst/app')
leaflet_circle <- function(data, weight = 1, varName, r = 0.2, fillOpacity = 0.009){
leaflet::leaflet(data) %>%
addTiles() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(lat = ~lat_mean, lng = ~long_mean, weight = weight, radius = ~(data$varName)^r,
fillOpacity = fillOpacity, group = "varName")
}
runApp('inst/app')
leaflet_circle <- function(data, weight = 1, varName, r = 0.2, fillOpacity = 0.009){
leaflet::leaflet(data) %>%
leaflet::addTiles() %>%
leaflet::addProviderTiles(providers$CartoDB.Positron) %>%
leaflet::addCircleMarkers(lat = ~lat_mean, lng = ~long_mean, weight = weight, radius = ~(data$varName)^r,
fillOpacity = fillOpacity, group = "varName")
}
runApp('inst/app')
leaflet_circle <- function(data, weight = 1, varName, r = 0.2, fillOpacity = 0.009){
leaflet::leaflet(data) %>%
leaflet::addTiles() %>%
leaflet::addProviderTiles(providers$CartoDB.Positron) %>%
leaflet::addCircleMarkers(lat = ~data$lat_mean, lng = ~data$long_mean, weight = weight, radius = ~(data$varName)^r,
fillOpacity = fillOpacity, group = "varName")
}
runApp('inst/app')
leaflet_circle <- function(data, weight = 1, varName, r = 0.2, fillOpacity = 0.009){
map <- leaflet::leaflet(data) %>%
leaflet::addTiles() %>%
leaflet::addProviderTiles(providers$CartoDB.Positron)
leaflet::addCircleMarkers(map, lat = ~data$lat_mean, lng = ~data$long_mean, weight = weight, radius = ~(data$varName)^r,
fillOpacity = fillOpacity, group = "varName")
}
runApp('inst/app')
help("~")
leaflet_circle <- function(data, weight = 1, varName, r = 0.2, fillOpacity = 0.009){
map <- leaflet::leaflet(data) %>%
leaflet::addTiles() %>%
leaflet::addProviderTiles(providers$CartoDB.Positron)
leaflet::addCircleMarkers(map, lat = ~lat_mean, lng = ~long_mean, weight = weight, radius = ~(varName)^r,
fillOpacity = fillOpacity, group = "varName")
}
runApp('inst/app')
colPlot <- function(data, date, country_list, color, varName){
p1 <- data %>%
dplyr::filter(date_reported == date & country %in% country_list) %>%
dplyr::arrange(-varName) %>%
head(5) %>%
ggplot2::ggplot(aes(x = reorder(country, varName), y = varName)) +
ggplot2::geom_col(fill = color) +
ggplot2::coord_flip()
}
runApp('inst/app')
devtools::load_all(".")
rm(list = c("colPlot"))
devtools::load_all(".")
runApp('inst/app')
runApp('inst/app')
colPlot <- function(data, date, country_list, color, varName){
data %>%
dplyr::filter(date_reported == date & country %in% country_list) %>%
dplyr::arrange(-varName) %>%
head(5) %>%
ggplot2::ggplot(aes(x = reorder(country, varName), y = varName)) +
ggplot2::geom_col(fill = color) +
ggplot2::coord_flip()
}
runApp('inst/app')
arrange
colPlot <- function(data, date, country_list, color, varName){
data %>%
dplyr::filter(date_reported == date & country %in% country_list) %>%
dplyr::arrange(desc(varName)) %>%
head(5) %>%
ggplot2::ggplot(aes(x = reorder(country, varName), y = varName)) +
ggplot2::geom_col(fill = color) +
ggplot2::coord_flip()
}
runApp('inst/app')
colPlot <- function(data, date, country_list, color, varName){
data %>%
dplyr::filter(date_reported == date & country %in% country_list) %>%
# dplyr::arrange(desc(varName)) %>%
head(5) %>%
ggplot2::ggplot(aes(x = reorder(country, varName), y = varName)) +
ggplot2::geom_col(fill = color) +
ggplot2::coord_flip()
}
runApp('inst/app')
colPlot <- function(data, date, country_list, color, varName){
varName <-  data$varName
data %>%
dplyr::filter(date_reported == date & country %in% country_list) %>%
# dplyr::arrange(desc(varName)) %>%
head(5) %>%
ggplot2::ggplot(aes(x = reorder(country, varName), y = varName)) +
ggplot2::geom_col(fill = color) +
ggplot2::coord_flip()
}
runApp('inst/app')
colPlot <- function(data, date, country_list, color, varName){
x <-  data$varName
data %>%
dplyr::filter(date_reported == date & country %in% country_list) %>%
# dplyr::arrange(desc(varName)) %>%
head(5) %>%
ggplot2::ggplot(aes(x = reorder(country, x), y = x)) +
ggplot2::geom_col(fill = color) +
ggplot2::coord_flip()
}
runApp('inst/app')
traceback()
as.character(as)
as
cat(ca)
print(cas)
type("Sd")
??type
class("WE")
class(sd)
class(cumul)
class(23)
colPlot <- function(data, date, country_list, color, varName){
data %>%
dplyr::filter(date_reported == date & country %in% country_list) %>%
# dplyr::arrange(desc(varName)) %>%
head(5) %>%
ggplot2::ggplot(aes(x = reorder(country, {{varName}}), y = {{varName}})) +
ggplot2::geom_col(fill = color) +
ggplot2::coord_flip()
}
runApp('inst/app')
colPlot <- function(data, date, country_list, color, varName){
data %>%
dplyr::filter(date_reported == {{date}} & country %in% {{country_list}}) %>%
# dplyr::arrange(desc(varName)) %>%
head(5) %>%
ggplot2::ggplot(aes(x = reorder(country, {{varName}}), y = {{varName}})) +
ggplot2::geom_col(fill = color) +
ggplot2::coord_flip()
}
colPlot <- function(data, date, country_list, color, varName){
data %>%
dplyr::filter(date_reported == {{date}} & country %in% {{country_list}}) %>%
arrange(desc({{varName}})) %>%
head(5) %>%
ggplot2::ggplot(aes(x = reorder(country, {{varName}}), y = {{varName}})) +
geom_col(fill = color) +
coord_flip()
}
runApp('inst/app')
colPlot <- function(data, date, country_list, color, varName, title){
data %>%
dplyr::filter(date_reported == {{date}} & country %in% {{country_list}}) %>%
arrange(desc({{varName}})) %>%
head(5) %>%
ggplot2::ggplot(aes(x = reorder(country, {{varName}}), y = {{varName}})) +
geom_col(fill = color) +
ggplot2::ggtitle(title) +
coord_flip()
}
runApp('inst/app')
colPlot <- function(data, date, country_list, color, varName, title){
data %>%
dplyr::filter(date_reported == {{date}} & {{country}} %in% {{country_list}}) %>%
arrange(desc({{varName}})) %>%
head(5) %>%
ggplot2::ggplot(aes(x = reorder({{country}}, {{varName}}), y = {{varName}})) +
geom_col(fill = color) +
ggplot2::ggtitle(title) +
coord_flip()
}
runApp('inst/app')
colPlot <- function(data, date, country_list, color, varName, title){
data %>%
dplyr::filter(date_reported == {{date}} & country %in% {{country_list}}) %>%
arrange(desc({{varName}})) %>%
head(5) %>%
ggplot2::ggplot(aes(x = reorder(country, {{varName}}), y = {{varName}})) +
geom_col(fill = color) +
ggplot2::ggtitle(title) +
coord_flip()
}
runApp('inst/app')
runApp('inst/app')
colPlot <- function(data, date, country_list, color, varName, title){
data %>%
dplyr::filter(date_reported == {{date}}) %>%
filter(country %in% {{country_list}}) %>%
arrange(desc({{varName}})) %>%
head(5) %>%
ggplot2::ggplot(aes(x = reorder(country, {{varName}}), y = {{varName}})) +
geom_col(fill = color) +
ggplot2::ggtitle(title) +
coord_flip()
}
runApp('inst/app')
runApp('inst/app')
help("%in%")
?match
colPlot <- function(data, date, country_list, color, varName, title){
data %>%
dplyr::filter(date_reported == {{date}} & match(country, {{country_list}})) %>%
arrange(desc({{varName}})) %>%
head(5) %>%
ggplot2::ggplot(aes(x = reorder(country, {{varName}}), y = {{varName}})) +
geom_col(fill = color) +
ggplot2::ggtitle(title) +
coord_flip()
}
runApp('inst/app')
View(leaflet_circle)
leaflet_cicle <- function(data, weight = 1, varName, r = 0.2, fillOpacity = 0.009, group){
map <- leaflet::leaflet(data) %>%
leaflet::addTiles() %>%
leaflet::addProviderTiles(providers$CartoDB.Positron)
leaflet::addCircleMarkers(map, lat = ~lat_mean, lng = ~long_mean, weight = weight, radius = ~({{varName}})^r,
fillOpacity = fillOpacity, group = group)
}
runApp('inst/app')
leaflet_cicle <- function(data, weight = 1, varName, r = 0.2, fillOpacity = 0.009, group){
leaflet::leaflet(data) %>%
addTiles() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(lat = ~lat_mean, lng = ~long_mean, weight = weight, radius = ~({{varName}})^r,
fillOpacity = fillOpacity, group = group)
}
runApp('inst/app')
colPlot <- function(data, date, country_list, color, varName, title){
data %>%
dplyr::filter(date_reported == {{date}} & match(country, {{country_list}}, 0)) %>%
arrange(desc({{varName}})) %>%
head(5) %>%
ggplot2::ggplot(aes(x = reorder(country, {{varName}}), y = {{varName}})) +
geom_col(fill = color) +
ggplot2::ggtitle(title) +
coord_flip()
}
runApp('inst/app')
runApp('inst/app')
colPlot <- function(data, date, color, varName, title){
data %>%
dplyr::filter(date_reported == {{date}}) %>%
arrange(desc({{varName}})) %>%
head(5) %>%
ggplot2::ggplot(aes(x = reorder(country, {{varName}}), y = {{varName}})) +
geom_col(fill = color) +
ggplot2::ggtitle(title) +
coord_flip()
}
runApp('inst/app')
runApp('inst/app')
devtools::load_all(".")
rm(list = c("colPlot"))
devtools::document()
?colPlot
devtools::load_all(".")
devtools::document()
runApp('inst/app')
devtools::load_all(".")
devtools::document()
multiSelection
res <- multiSelection(id = NULL)
expect_error(res)
expect_error(multiSelection(id = NULL))
expect_error(multiSelection(id = NULL))
expect_error(multiSelection(inputDisplay = NULL))
expect_error(multiSelection(selection = NULL))
devtools::load_all(".")
devtools::document()
usethis::use_pipe()
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
library(covid19ViewerShiny)
??arrange
?arrange
devtools::load_all(".")
devtools::document()
library(covid19ViewerShiny)
devtools::load_all(".")
devtools::document()
library(covid19ViewerShiny)
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
library(covid19ViewerShiny)
library(covid19ViewerShiny)
sessionInfo(package = c("shiny", "readr", "tidyverse", "plotly", "gridExtra", "shinyWidgets", "leaflet", "leaflet.providers", "ggplot2"))
devtools::load_all(".")
devtools::document()
usethis::use_package("dplyr")
devtools::document()
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
devtools::document()
library(covid19ViewerShiny)
importFrom("stats", "filter")
stats::filter()
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
devtools::document()
library(covid19ViewerShiny)
devtools::load_all(".")
devtools::document()
library(covid19ViewerShiny)
devtools::load_all(".")
devtools::document()
library(covid19ViewerShiny)
devtools::load_all(".")
